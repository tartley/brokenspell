
CURRENT TASK:

rethink names of 'gameitem / worlditem' hierarchy. world class contains
collection of all items, but these are both worlditems and other things
(base classes of worlditems, and siblings of worlditem, eg. huditem)

Put HUD entities into same world game item collection
    - hills
    - score
    - startup messages


REFACTOR

Move all the junk out of Application
    - remove self.world from application

Probably remove 'recalc sprite stats' stuff, or at least stop having
to load dummy images before being able to call it

Combine the different functions which create the initial wave, create
subsequent waves, and create the performance_test wave.

Render doesn't need application nor win. Just world should do it.

remove application's reference to world

take logic from world.add and world.remove to keep count of num_enemies,
put it into game or somesuch instead, by listening for these events

Refactor collision response code. Don't currently like how response to a
single collision is split between both protagonists and their base classes.

Can we use a single media player to play all sound effects, rather than
creating a new one each time a sound is played (like flap did)?

The whole 'resurrecting' nonsense needs fixing, Just create a new Player
object instead.


BUGS

pressing 'alt' hangs the game until you press it again??? (jlappy/winxp)

Some people do not get vsync. Can we enforce this? Or busy wait? Or make game
speed dependant on frame rate?

Audio does not work properly on ALSA on my ubuntu (crashes on 32nd play of flap)
* is this an ALSA limitation - does it work if I install and use OpenAL?
* can we fix this with better use of pyglet API?

Review all the bugs people reported in pyweek

If errors occur in audio, we should catch and run silent

Improve accuracy of collision detection


FEATURES

Only show fps in performance test mode, or when outside acceptable range.

Difficulty/gameplay tuning
* Player dies rather than losing feathers
* zero lives = game over
* enemy birds should die on first hit

later levels should contain more birds

Current enemy attacking 'dive on you' behaviour needs work. In particular, it
does not account for horizontal velocities, so a diving enemy will almost
always miss. Should only dive if higher than player (diving away when below is
just annoying)

Lives
* HUD: add lives remaining
* dying decrements
* game over on 0
* game reset after game over

Scoring
* feathers should score multiples of 10
* floating numbers to show points for feather collection
* score should use ',' as thousands separator

Control
* Holding down flap lets you glide? (if speed is high enough?)
* Holding down very briefly produces a weaker flap?
* Enemy ducks should hold down flap a tad longer than they do

Combos
* HUD: display multiplier
* killing an enemy increments multiplier
* multiplier reduces back to 1 over time
* feather scores are multiplied by this

More sound effects reqd:
* enemy attacked: spluttering quacks
* player attacked: urgent spluttering quacks
* birds bounce off harmlessly at equal heights
* Game over

fullscreen mode
* button to toggle it

High scores
* Displayed after user dies, until next game starts
* Persisted

Binary exe for Mac

Binary exe for Linux


NOT BEING DONE

Enemy behaviour. Smarter enemies should:
* face and move away when attacked
* cruise faster
* change altitude / direction more frequently
* flap to get higher than you when approaching from the side (unless you
  are behind them)
* run when attacked
* dive & move away when you are above them
* produce more feathers when dead

walking animation when landed should probably be slightly quicker and more
responsive than gliding without flaps (but slower than flying with flaps)

wraparound without disappearing - requires drawing things twice if they are off
edge of screen, and doing collision detection on the dual locations.

Clouds
    Do nothing except float across the screen, obscuring what is behind them.
    These aren't as much value as platforms, but sure would be easy to code.
    Maybe introduce a new cloud every three waves

Platforms
    Would be nice
    But is a bunch of work.
    Affects collisions, behaviour, gameplay, graphics, etc.
    Are they worth it?

Collecting feathers improves flap power - don't like this on reflection.
    It makes control of the player very icky if flap_power is a variable
    amount. (or at least I couldn't find the right combo of values)
    Plus, it makes balancing enemy AI harder if they have to account for
    variable flap power.

