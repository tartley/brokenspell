
CURRENT TASK:



FEATURES

Difficulty/gameplay tuning
* Player dies rather than losing feathers
* OR Player collects up to 3 'shield feathers', which need a HUD

Enemy ducks should not collect feathers, it's just annoying.

Each wave gets a special message

Lives
* store on Game
* HUD: display lives remaining
* dying decrements number of lives
* game over on 0
* back to titles after game over

fullscreen mode
* button to toggle it

* persist fullscreen between runs
* persist vsync between runs

Current enemy attacking 'dive on you' behaviour needs work. In particular, it
does not account for horizontal velocities, so a diving enemy will almost
always miss.
* Should only dive if bird is smart, which happens if wave is high.
* Should only dive is bird is higher than player (diving away when below is
  just annoying)

* waves have n*n birds in them?
* higher waves have birds that fly faster?

* Enemy ducks should hold down flap a tad longer than they do, just for the
  sake of the animation.

More sound effects reqd:
* player attacked: urgent cries
* birds bounce off harmlessly at equal heights
* Game over

* Only show fps when outside acceptable range.
* Key to toggle fps visibility?

Combos
* HUD: display multiplier
* killing an enemy increments multiplier
* multiplier reduces back to 1 over time
* feather scores are multiplied by this

Control
* Holding down flap lets you glide? (if speed is high enough?)
* Holding down briefly produces a weaker flap?

High scores?
* Displayed after user dies, until next game starts
* Persisted?

Binary exe for Mac

Binary exe for Linux



BUGS

fuzzy line along top of rotated sprites, introduced when I started using
a texture atlas.

rotation of player bird goes screwy at high velocity

pressing 'alt' hangs the game until you press it again??? (jlappy/winxp)

Some people do not get vsync. Can we enforce this? Or busy wait? Or make game
speed dependant on frame rate?

Audio does not work properly on ALSA on my ubuntu (crashes on 32nd play of flap)
* is this an ALSA limitation - does it work if I install and use OpenAL?
* can we fix this with better use of pyglet API? Review how many media players
  we create, etc. 'flap' used to create a new one for each play, does it still?

Review the bugs people reported in pyweek

If errors occur in audio, we should catch and run silent
    - if no audio device: OK, handled
    - if wrong driver selected: not handled



REFACTOR

review what happens in worlditem.on_collide(). Why do ducks go crazy when
you inject lots of them?

Refactor collision detection code. Suspect this is cause of slowdown when
injecting many ducks or feathers into the arena.
Maybe arena could keep entities in a dictionary instead of a set, keyed on
the item type. Then collision detection could just test all entries in
items[Bird] against entries in items[Feather], etc. This is a great idea.

Refactor collision response code. Don't like how response to a
single collision is split between both protagonists and their base classes.

Maybe collision detection should not immediately invoke collision response,
but should leave a collection of touching worlditems on each item. Then
it is up to the items to respond to that in update()

Consider that a worlditems have-a displayable, rather than being one.
Displayable is root class, derived into SpriteHolder, LabelHolder,
VertexListHolder. Can we then sort out HudItems to share more code?
Type of worlditem that has-a displayable is called VisibleItem.

                  GameItem   AHAR! This relationship is BACKWARDS!
                     |               |
                 VisibleItem<>-----------Displayable
                /    |      \            /     |    \
       WorldItem  HudItem  Ground    Sprite  Label   VertexList
         /    \        |   & Sky     Holder  Holder   Holder
      Bird    Feather  A
     /    \          great
  Player  Enemy    many things

A Displayable knows about its parent GameItem - not the other way around!
The WorldItem exposes properties that the displayable uses.

move 'build-mswin-dist.py' to 'setup.py', think about adding a makefile
or make-bin.bat which invokes it with the correct args.

Can fps display be put into render.batch as well? It can if we construct
our own.

Behaviour code is a bit wonky. Examine the state machine in the Python
Game book to see if it could be better that way.



NOT BEING DONE

Enemy behaviour. Smarter enemies should:
* face and move away when attacked
* cruise faster
* change altitude / direction more frequently
* flap to get higher than you when approaching from the side (unless you
  are behind them)
* run when attacked
* dive & move away when you are above them
* produce more feathers when dead

walking animation when landed should probably be slightly quicker and more
responsive than gliding without flaps (but slower than flying with flaps)

wraparound without disappearing - requires drawing things twice if they are off
edge of screen, and doing collision detection on the dual locations.

Clouds
    Do nothing except float across the screen, obscuring what is behind them.
    These aren't as much value as platforms, but sure would be easy to code.
    Maybe introduce a new cloud every three waves

Platforms
    Would be nice
    But is a bunch of work.
    Affects collisions, behaviour, gameplay, graphics, etc.
    Are they worth it?

Collecting feathers improves flap power - don't like this on reflection.
    It makes control of the player very icky if flap_power is a variable
    amount. (or at least I couldn't find the right combo of values)
    Plus, it makes balancing enemy AI harder if they have to account for
    variable flap power.

