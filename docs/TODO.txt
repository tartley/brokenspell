
CURRENT TASK:


FEATURES

Binary exe for Windows
    - test it on bare bones VM

Source downloadable, make sure it includes everything it needs and runs ok

Binary rpm / deb for Linux

Binary exe for Mac


BUGS

rotation of player bird goes screwy at high velocity

pressing 'alt' hangs the game until you press it again? (jlappy/winxp)

Some people do not get vsync. Can we enforce this? Or busy wait? Or make game
speed dependant on frame rate?

Audio does not work properly on ALSA on my ubuntu (crashes on 32nd play of flap)
* is this an ALSA limitation - does it work if I install and use OpenAL?
* can we fix this with better use of pyglet API? Review how many media players
  we create, etc. 'flap' used to create a new one for each play, does it still?

Review the bugs people reported in pyweek

If errors occur in audio, we should catch and run silent
    - if no audio device: OK, handled
    - if wrong driver selected: not handled

Three-body collisions are probably not handled correctly


REFACTOR

Consider that a worlditems have-a displayable, rather than being one.
Displayable is root class, derived into SpriteHolder, LabelHolder,
VertexListHolder. Can we then sort out HudItems to share more code?
Type of worlditem that has-a displayable is called VisibleItem.

                  GameItem   AHAR! This relationship is BACKWARDS!
                     |               |
                 VisibleItem<>-----------Displayable
                /    |      \            /     |    \
       WorldItem  HudItem  Ground    Sprite  Label   VertexList
         /    \        |   & Sky     Holder  Holder   Holder
      Bird    Feather  A
     /    \          great
  Player  Enemy    many things

A Displayable knows about its parent GameItem - not the other way around!
The WorldItem exposes properties that the displayable uses.

Can fps display be put into render.batch as well? It can if we construct
our own.

Behaviour code is a bit wonky. Examine the state machine in the Python
Game book to see if it could be better that way.


NOT BEING DONE

Enemy behaviour. Smarter enemies should:
* face and move away when attacked
* cruise faster
* change altitude / direction more frequently
* flap to get higher than you when approaching from the side (unless you
  are behind them)
* run when attacked
* dive & move away when you are above them
* produce more feathers when dead

walking animation when landed should probably be slightly quicker and more
responsive than gliding without flaps (but slower than flying with flaps)

wraparound without disappearing - requires drawing things twice if they are off
edge of screen, and doing collision detection on the dual locations.

Clouds
    Do nothing except float across the screen, obscuring what is behind them.
    These aren't as much value as platforms, but sure would be easy to code.
    Maybe introduce a new cloud every three waves

Platforms
    Would be nice
    But is a bunch of work.
    Affects collisions, behaviour, gameplay, graphics, etc.
    Are they worth it?

Collecting feathers improves flap power - don't like this on reflection.
    It makes control of the player very icky if flap_power is a variable
    amount. (or at least I couldn't find the right combo of values)
    Plus, it makes balancing enemy AI harder if they have to account for
    variable flap power.

